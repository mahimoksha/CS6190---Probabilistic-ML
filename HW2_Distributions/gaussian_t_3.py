# -*- coding: utf-8 -*-
"""Gaussian_t_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S-LlpEAKSRGK0bgqCjOrQRQlc1doPR2Z
"""

import numpy as np
from scipy.optimize import minimize
import math
import matplotlib.pyplot as plt
from scipy.special import gamma
from scipy.stats import norm, t

np.random.seed(200)
samples = np.random.normal(0, np.sqrt(2), size=30)
def gaussian_likelihood(params, data):
    mu, sigma = params
    n = len(data)
    loglikelihood = -np.sum(np.log(1 / np.sqrt(2 * np.pi * sigma**2)) - (data - mu)**2 / (2 * sigma**2))
    return loglikelihood
def student_likelihood(params, data):
    nu = params
    n = len(data)
    loglikelihood = -np.sum(gamma((nu+1)/2) - gamma(nu/2) - np.log(np.sqrt(np.pi*nu)) - (nu+1)/2 * np.log(1 + (data**2)/nu))
    return loglikelihood

res_gaussian = minimize(gaussian_likelihood, [0,2], args=samples, method='L-BFGS-B')
print('Using Maximum likelihood for Gaussian distribution without outliers the estimated parameters mean {}, variance {}'.format(res_gaussian.x[0],res_gaussian.x[1]))
Gaussian_mean = res_gaussian.x[0]
Gaussian_var = res_gaussian.x[1]
x = np.linspace(-5, 5, 1000)
pdf = 1/(np.sqrt(2 * np.pi*Gaussian_var**2)) * np.exp(-(x-Gaussian_mean)**2/(2*(Gaussian_var)**2))

plt.clf()
plt.plot(x, pdf, linewidth=2, color='b', label="without outliers Gaussian PDF")
# plt.plot(samples,'*')
plt.legend()
# plt.show()
plt.savefig("without_outliers_gaussian_distribution.png")

result = minimize(student_likelihood, [1], args = samples, method='L-BFGS-B')
new_nu_param = result.x
print("Using Maximum likelihood for student t distribution without outliers the estimated parameter nu is {}".format(new_nu_param))
student_t_pdf = np.exp(gamma((new_nu_param+1)/2) - gamma(new_nu_param/2) - np.log(np.sqrt(np.pi*new_nu_param)) - (new_nu_param+1)/2 * np.log(1 + (x**2)/new_nu_param))
plt.plot(x, student_t_pdf, label='without outliers student t-distribution')
plt.legend()
# plt.show()
plt.savefig("without_outliers_t_distribution.png")

newsamples = np.append(samples,[8,9,10])

res_gaussian = minimize(gaussian_likelihood, [0,2], args=newsamples, method='L-BFGS-B')
print('Using Maximum likelihood for Gaussian distribution with outliers the estimated parameters mean {}, variance {}'.format(res_gaussian.x[0],res_gaussian.x[1]))
Gaussian_mean = res_gaussian.x[0]
Gaussian_var = res_gaussian.x[1]
x = np.linspace(-5, 11, 1000)
plt.hist(newsamples, bins=20, density=True, label='samples')
pdf = 1/(np.sqrt(2 * np.pi*Gaussian_var**2)) * np.exp(-(x-Gaussian_mean)**2/(2*(Gaussian_var)**2))
plt.clf()
plt.plot(x, pdf, linewidth=2, color='b', label="Outliers Gaussian PDF")
plt.legend()
# plt.show()
plt.savefig("outliers_gaussian_distribution.png")

result = minimize(student_likelihood, [1], args = newsamples, method='L-BFGS-B')
new_nu_param = result.x
print("Using Maximum likelihood for student t distribution with outliers the estimated parameter nu is {}".format(new_nu_param))
student_t_pdf = np.exp(gamma((new_nu_param+1)/2) - gamma(new_nu_param/2) - np.log(np.sqrt(np.pi*new_nu_param)) - (new_nu_param+1)/2 * np.log(1 + (x**2)/new_nu_param))
plt.plot(x, student_t_pdf, label='Outliers student t-distribution')
plt.legend()
# plt.show()
# plt.plot(samples)
plt.savefig("outliers_t_distribution.png")