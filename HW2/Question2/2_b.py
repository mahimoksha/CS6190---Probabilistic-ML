# -*- coding: utf-8 -*-
"""2_b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uun_xjkEemzRKw3tXBW9oPL4fY9APfl7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize
import math
from scipy.stats import norm
import warnings
warnings.filterwarnings("ignore")

data_train = pd.read_csv("bank-note/train.csv", header=None)
data_test = pd.read_csv("bank-note/test.csv", header=None)
X = data_train.iloc[:,:4]
Y = data_train.iloc[:,-1]
X_test = data_test.iloc[:,:4]
Y_test = data_test.iloc[:,-1]

def log_likelihood(X, y, w):
    z = np.dot(X, w)
    return -np.dot(y , norm.logcdf(np.dot(X,w))) - np.dot((1-y), np.log(1-norm.cdf(np.dot(X,w))))

def map_estimation(X, y, max_iter=300, tol=1e-5):
    n, d = X.shape
    w_init = np.zeros(d)
    def negative_log_posterior(w):
        return log_likelihood(X, y, w) - 0.5  * np.dot(w.T,w)
    
    result = minimize(negative_log_posterior, w_init, method='L-BFGS-B',
                      options={'maxiter': max_iter, 'gtol': tol})
    return result.x

def eval(data, labels, weights):
    c = 0
    for i in range(data.shape[0]):
        z = np.dot(np.array(data.iloc[i]), weights)
        # y= 1.0 / (1.0 + np.exp(-z))
        y = np.random.normal(z,1)
        if y>=0:
          if 1 == labels.iloc[i]:
              c+=1
        else:
          if 0 == labels.iloc[i]:
              c+=1
    return c

np.random.seed(2)
weights = map_estimation(X,Y)
print("With Initializing the weights to be zero: ")
print("The converged weights are : ",weights)
print("Train Accuracy = ",eval(X,Y,weights)/len(Y))
print("Test Accuracy = ",eval(X_test,Y_test,weights)/len(Y_test))

def map_estimation_gaussian(X, y, max_iter=100, tol=1e-5):
    n, d = X.shape
    w_init = np.random.normal(0,1,size=d)
    def negative_log_posterior(w):
        return log_likelihood(X, y, w) + 0.5  * np.dot(w.T,w)

    result = minimize(negative_log_posterior, w_init, method='L-BFGS-B',
                      options={'maxiter': max_iter, 'gtol': tol})
    return result.x

np.random.seed(2)
weights = map_estimation_gaussian(X, Y)
print("With Initializing the weights to be random normal: ")
print("The converged weights are : ",weights)
print("train accuracy = ",eval(X,Y,weights)/len(Y))
print("test accuracy = ",eval(X_test,Y_test,weights)/len(Y_test))

